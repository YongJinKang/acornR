install.packages("corrplot", quiet = TRUE)
library(dplyr, quietly = TRUE)
library(corplot)
library(corrplot)
( res <- sample_n(tbl = mtcars, size = 10, replace = FALSE) )
#수적자료를 들고 있는 양적변수여야 상관행렬이 제대로 그려진다.
library(knitr, quietly = TRUE)
kable(x = res, caption = 'The random sampling of mtcars data set')
M <- cor( mtcars ) )
M <- cor( mtcars ))
(M <- cor( mtcars ))
round(M,2) ##소수점 둘째짜리까지지
library(corrplot, quietly = TRUE)
corrplot(M, method="circle")
corrplot(M, method="square")
corrplot(M, method="ellipse")
corrplot(M, method="square")
corrplot(M, method="ellipse")
# corrplot(M, method="number")
corrplot(M, method="shade")
corrplot(M, method="color")
corrplot(M, method="number")
corrplot(M, method="color")
corrplot(M, method="pie")
corrplot(M, type="upper")
corrplot(M, type="lower")
# Change background color to lightblue
corrplot(M, type="upper", order="hclust", col=c("black", "white"), bg="lightblue")
#10. Changing the color and the rotation of text labels
#tl.col (for text label color) and tl.srt (for text label string rotation) are used to change text colors and rotations.
corrplot(M, type="upper", order="hclust", tl.col="blue", tl.srt=45)
#11. Combining correlogram with the significance test
#Computing the p-value of correlations
#To compute the matrix of p-value, a custom R function is used :
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test{stats} function
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
} # end function
# matrix of the p-value of the correlation
p.mat <- cor.mtest(mtcars)
head(p.mat[, 1:5])
# Specialized the insignificant value according to the significant level
corrplot(M, type="upper", order="hclust", p.mat = p.mat, sig.level = 0.01)
# Leave blank on no significant coefficient
corrplot(M, type="upper", order="hclust", p.mat = p.mat, sig.level = 0.01, insig = "blank")
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(
M,
method="color",
col=col(200),
type="upper",
order="hclust",
# Add coefficient of correlation
addCoef.col = "black",
#Text label color and rotation
tl.col="red",
tl.srt=45,
# Combine with significance
p.mat = p.mat,
sig.level = 0.01,
insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
install.packages("xtable")
library(xtable)
install.packages("ggpubr", quiet = TRUE)
t.test(x, mu = 0, alternative = "two.sided")  # default: two-tailed test
set.seed(1234)
(
my_data <- data.frame(
name = paste0(rep("M_", 10), 1:10),
weight = round(rnorm(10, 20, 2), 1)
)
)
# Print the random sampled, 10 rows of the data
library(dplyr, quietly = TRUE)
sample_n(tbl = my_data, size = 10, replace = FALSE)
# Statistical summaries of weight
summary(my_data$weight)
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
install.packages("ggpubr")
library("ggpubr")
t.test(x, y, alternative = "two.sided", var.equal = FALSE)
# Create a data frame
(
my_data <- data.frame(
group = rep(c("Woman", "Man"), each = 9),
weight = c(women_weight,  men_weight)
)
)
women_weight <- c(38.9, 61.2, 73.3, 21.8, 63.4, 64.6, 48.4, 48.8, 48.5)
men_weight <- c(67.8, 60, 63.4, 76, 89.4, 73.3, 67.3, 61.3, 62.4)
# Create a data frame
(
my_data <- data.frame(
group = rep(c("Woman", "Man"), each = 9),
weight = c(women_weight,  men_weight)
)
)
group_by(my_data, group) %>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
ggboxplot(my_data, x= "group", y = "weight", color = "group", palette = c("#00AFBB", "#E7B800"), ylab = "\eight", xlab = "Groups")
ggboxplot(my_data, x= "group", y = "weight", color = "group", palette = c("#00AFBB", "#E7B800"), ylab = "Weight", xlab = "Groups")
# Shapiro-Wilk normality test for Men's weights
with(my_data, shapiro.test(weight[group == "Man"]))# p = 0.10
#Shapiro-Wilk normality test for Women's weights
with(my_data, shapiro.test(weight[group == "Woman"])) # p = 0.6
( res.ftest <- var.test(weight ~ group, data = my_data) )
install.packages("PairedData")
library(PairedData)
before <- subset(my_data, group =="before", weight, drop = TRUE)
#Subset weight data before treatment
after <- subset(my_data, group == "after", weight, drop = TRUE)
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
group_by(my_data, group) %>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
ggboxplot(my_data,
x = "group",
y = "weight",
color = "group",
palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight",
xlab = "Groups"
)
install.packages("gplots")
library(gplot2)
library(gplots)
install.packages("mlutcomp")
install.packages("multcomp")
library(multcomp)
library(ggmap)
library(readxl)
library(dplyr)
library(tidyr)
#install.packages("xlsx")
#library(xlsx)
#write.xlsx(real_apartment, "real_apartment_real.xlsx")
#str(real_apartment)
real_apartment <- read_excel("seoul_apartment_real.xlsx")
install.packages("xlsx")
library(xlsx)
#write.xlsx(real_apartment, "real_apartment_real.xlsx")
#str(real_apartment)
real_apartment <- read_excel("seoul_apartment_real.xlsx")
#write.xlsx(real_apartment, "real_apartment_real.xlsx")
#str(real_apartment)
real_apartment <- read_excel("./seoul_apartment_real.xlsx")
library(ggplot2)
library(readxl)
df_re <- read_excel("excel_exam.xlsx")
df_re <- read_excel("./Data/excel_exam.xlsx")
df_re
df_re <- read_excel("./Data/seoul_apartment_combinated.xlsx")
df_re
head(df_re)
tail(exam)
tail(df_re
tail(df_re)
VIew(df_re)
View(df_re)
dim(exam)
dim(df_re)
str(df_re)
summary(df_re)
library(dplyr)
hist(df_re$`KOSPI 평균`)
ggplot(data = df_re, aes(x = 분류/기간 ,y = KOSPI 평균균 )) + geom_line()
ggplot(data = df_re, aes(x = 분류/기간 ,y = KOSPI 평균 )) + geom_line()
View(df_re)
ggplot(data = df_re, aes(x = '분류/기간' ,y = 'KOSPI 평균' )) + geom_line()
ggplot(data = df_re, aes(x = 분류/기간 ,y = KOSPI 평균))+ geom_line()
library(ggplot2)
ggplot(data = df_re, aes(x =분류/기간,y=실거래가지수)) + geom_line()
df_re <- rename(df_re, date = 분류/기간간)
df_re <- rename(df_re, date = 분류/기간)
df_re <- rename(df_re, 분류/기간 = date)
df_re$실거래가지수
View(df_re$실거래가지수)
library(ggplot2)
library(readxl)
df_re <- read_excel("./Data/seoul_apartment_combinated.xlsx")
df_re
head(df_re)
tail(df_re)
View(df_re)
dim(df_re)
str(df_re)
summary(df_re)
library(dplyr)
hist(df_re$`KOSPI 평균`)
hist(df_re$`KOSPIaverage`)
library(ggplot2)
ggplot(data = df_re, aes(x =date,y=KOSPIaverage)) + geom_line()
ggplot(data = df_re, aes(x =date,y=realexchange)) + geom_line()
df_re <- read_excel("./Data/seoul_apartment_combinated.xlsx")
ggplot(data = df_re, aes(x =date,y=realexchange)) + geom_line()
library(ggplot2)
library(readxl)
df_re <- read_excel("./Data/seoul_apartment_combinated.xlsx")
df_re
head(df_re)
tail(df_re)
View(df_re)
dim(df_re)
str(df_re)
summary(df_re)
library(dplyr)
hist(df_re$`KOSPIaverage`)
hist(df_re$`kosave`)
library(ggplot2)
ggplot(data = df_re, aes(x =date,y=kosave)) + geom_line()
ggplot(data = df_re, aes(x =date,y=realexchange)) + geom_line()
library(ggplot2)
library(readxl)
df_re <- read_excel("./Data/seoul_apartment_combinated.xlsx")
df_re
head(df_re)
tail(df_re)
View(df_re)
dim(df_re)
str(df_re)
summary(df_re)
library(dplyr)
hist(df_re$`kosave`)
library(ggplot2)
ggplot(data = df_re, aes(x =date,y=kosave)) + geom_line()
ggplot(data = df_re, aes(x =date,y=realexchange)) + geom_line()
library(ggplot2)
library(readxl)
df_re <- read_excel("./Data/seoul_apartment_combinated.xlsx")
df_re
head(df_re)
tail(df_re)
View(df_re)
dim(df_re)
str(df_re)
summary(df_re)
library(dplyr)
hist(df_re$`kosave`)
library(ggplot2)
ggplot(data = df_re, aes(x =date,y=kosave)) + geom_line()
ggplot(data = df_re, aes(x =date,y=realexchange)) + geom_line()
ggplot(data = df_re, aes(x =date,y=apt_index)) + geom_line()
df <- read.delim(file.choose(), sep = ',')
df_csv <- read.csv(file.choose(), sep = ',')
df_csv <- iris
head(df_csv)
head(df_csv, 6)
head(df_csv, 20)
mean(iris$Sepal.Length)
sd(iris$Sepal.Length)
var(iris$Sepal.Length)
min(iris$Sepal.Length)
max(iris$Sepal.Length)
median(iris$Sepal.Length)
range(iris$Sepal.Length)
quantile(iris$Sepal.Length)
quantile(iris$Sepal.Length, probs = seq(0, 1, .25))
quantile(iris$Sepal.Length, probs = seq(0, 1, .1))
quantile(iris$Sepal.Length, seq(0, 1, .25))
quantile(iris$Sepal.Length, seq(0, 1, .1))
quantile(iris$Sepal.Length, seq(0, 1, .05))
summary(iris$Sepal.Length)
summary(iris)
summary(iris$Sepal.Length)
summary(iris)
IQR(iris$Sepal.Length)
# install.packages('modeest', dependencies = T)
library(modeest)
modeest::mfv(iris$Sepal.Length)
library(statip)
statip::mfv(iris$Sepal.Length)
# 4-3. Interquartile range
quantile(iris$Sepal.Length)
quantile(iris$Sepal.Length, seq(0, 1, .1))
IQR(iris$Sepal.Length)
# 4-4. Variance and standard deviation
var(iris$Sepal.Length)
sd(iris$Sepal.Length)
# 4-5. Median absolute deviation
median(iris$Sepal.Length)
mad(iris$Sepal.Length)
# 5-1. summary() function
summary(iris)
summary(iris, digits = 1)
summary(iris, digits = 2)
summary(iris, digits = 2)
summary(iris, digits = 3)
summary(iris, digits = 6)
summary(iris, digits = 1)
summary(iris, digits = 2)
summary(iris, digits = 3)
summary(iris, digits = 6)
summary(iris, digits = 10)
summary(iris, digits = 30)
summary(iris, digits = 20)
# 5-2. sapply() function
sapply(iris, mean)
sapply(iris[-length(iris)], mean)
# 5-2. sapply() function
length(iris)
# 5-2. sapply() function
help(length)
# 5-2. sapply() function
help(length())
# 5-2. sapply() function
help(length)
sapply(iris[-length(iris)], mean)
sapply(iris[-length(iris)], quantile, probs=seq(0, 1, .25))
# 5-3. stat.desc{pastecs} function
# install.packages("pastecs")
library(pastecs)
stat.desc(iris)
round(stat.desc(iris[-length(iris)]), 2)
# 5-4. Case of missing values
mean(iris$Sepal.Length, na.rm = T)
library(dplyr)
library(ggpubr)
?ToothGrowth
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
?set.seed
set.seed(1234)
?dplyr::sample_n
dplyr::sample_n(ToothGrowth, 10)
?dplyr::sample_n
dplyr::sample_n(ToothGrowth, 10)
dplyr::sample_n(ToothGrowth, 10, replace = TRUE)
dplyr::sample_n(ToothGrowth, 10, replace = TRUE)
# 5-1. Visual methods
library(ggpubr)
ggdensity(ToothGrowth$len)
ggdensity(ToothGrowth$len, main = '- Density plot of tooth length -')
ggdensity(ToothGrowth$len, main = '- Density plot of tooth length -', linetype = 'dashed')
ggdensity(ToothGrowth$len, main = '- Density plot of tooth length -', linetype = 'dashed', color = 'blue')
ggdensity(ToothGrowth$len, main = '- Density plot of tooth length -', fill = 'skyblue')
ggdensity(ToothGrowth$len, title = '- Density plot of tooth length -', xlab = 'Tooth length', ylab = 'Density')
#xlab, ylab 뭘의미하는지와 같은 데코레이션은 해줘라 !!
# 5-2. Q-Q plot
library(ggpubr)
ggqqplot(ToothGrowth$len)
ggqqplot(ToothGrowth$len)
library(car)
?qqPlot
qqPlot(ToothGrowth$len)
qqPlot(ToothGrowth$len, simulate = FALSE)   # 사용되지 않은 인자 (simulate = FALSE)
qqPlot(ToothGrowth$len)
qqPlot(ToothGrowth$len, simulate = FALSE)   # 사용되지 않은 인자 (simulate = FALSE)
qqPlot(ToothGrowth$len, reps = 10)          # 사용되지 않은 인자 (reps = 10)
qqPlot(ToothGrowth$len, reps = 10)          # 사용되지 않은 인자 (reps = 10)
qqPlot(ToothGrowth$len)
qqPlot(ToothGrowth$len, simulate = FALSE)   # 사용되지 않은 인자 (simulate = FALSE)
qqPlot(ToothGrowth$len, reps = 10)          # 사용되지 않은 인자 (reps = 10)
qqPlot(ToothGrowth$len, id = FALSE)
qqPlot(ToothGrowth$len, id = FALSE)
qqPlot(ToothGrowth$len, id = TRUE)
qqPlot(ToothGrowth$len, lwd = 1)
qqPlot(ToothGrowth$len, lwd = 1)
qqPlot(ToothGrowth$len, lwd = 1, pch = 1)
qqPlot(ToothGrowth$len, lwd = 1, pch = 2)
qqPlot(ToothGrowth$len, lwd = 1, pch = 3)
qqPlot(ToothGrowth$len, lwd = 1, pch = 4)
qqPlot(ToothGrowth$len, lwd = 1, pch = 5)
qqPlot(ToothGrowth$len, lwd = 1, pch = 6)
qqPlot(ToothGrowth$len, lwd = 1, pch = 7)
qqPlot(ToothGrowth$len, lwd = 1, pch = 8)
qqPlot(ToothGrowth$len, lwd = 1, pch = 9)
qqPlot(ToothGrowth$len, lwd = 1, pch = 10)
qqPlot(ToothGrowth$len, lwd = 1, pch = 11)
qqPlot(ToothGrowth$len, lwd = 1, pch = 12)
qqPlot(ToothGrowth$len, lwd = 1, pch = 13)
qqPlot(ToothGrowth$len, lwd = 1, pch = 14)
qqPlot(ToothGrowth$len, lwd = 1, pch = 15)
qqPlot(ToothGrowth$len, lwd = 1, pch = 16)
qqPlot(ToothGrowth$len, lwd = 1, pch = 17)
qqPlot(ToothGrowth$len, lwd = 1, pch = 18)
qqPlot(ToothGrowth$len, lwd = 1, pch = 19)
qqPlot(ToothGrowth$len, lwd = 1, pch = 20)
qqPlot(ToothGrowth$len, lwd = 1, pch = 21)
qqPlot(ToothGrowth$len, lwd = 1, pch = 22)
qqPlot(ToothGrowth$len, lwd = 1, pch = 23)
qqPlot(ToothGrowth$len, lwd = 1, pch = 24)
qqPlot(ToothGrowth$len, lwd = 1, pch = 24, cex = 1)
qqPlot(ToothGrowth$len, lwd = 1, pch = 24, cex = 2)
qqPlot(ToothGrowth$len, lwd = 1, pch = 24, cex = 3)
qqPlot(ToothGrowth$len, lwd = 2, envelope = .95)
qqPlot(ToothGrowth$len, lwd = 2, envelope = .99)
qqPlot(ToothGrowth$len, lwd = 2, envelope = .95)
qqPlot(ToothGrowth$len, lwd = 2, envelope = .99)
qqPlot(ToothGrowth$len, lwd = 2, envelope = .99, col = 'red')
qqPlot(ToothGrowth$len, lwd = 2, envelope = .99, col = 'red', col.lines = 'black')
qqPlot(ToothGrowth$len, main='Q-Q plot of Tooth length')
qqPlot(ToothGrowth$len, main='Q-Q plot of Tooth length', xlab = 'Theoretical', ylab = 'Length')
qqPlot(ToothGrowth$len, main='Q-Q plot of Tooth length', xlab = 'Theoretical', ylab = 'Length', las = 0)
qqPlot(ToothGrowth$len, main='Q-Q plot of Tooth length', xlab = 'Theoretical', ylab = 'Length', las = 1)
?shapiro.test
shapiro.test(ToothGrowth$len)  # between 3 and 5000.
test_var <- rnorm(5001)
length(test_var)
shapiro.test(test_var)
shapiro.test(ToothGrowth$len)  # between 3 and 5000.
test_var <- rnorm(5001)
length(test_var)
shapiro.test(test_var)
?ToothGrowth
dim(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
View(ToothGrowth)
table(ToothGrowth$supp, ToothGrowth$dose)
( df <- ToothGrowth )
dplyr::sample_n(df, 10)
# 2-1. Visual methods
library(ggpubr)
ggdensity(df$len)
ggdensity(df$len, main = 'Density of tooth length')
ggdensity(df$len, main = 'Density of tooth length', linetype = 'dashed')
ggdensity(df$len, main = 'Density of tooth length', linetype = 'dashed', color = 'blue')
ggdensity(df$len, main = 'Density of tooth length', fill = 'skyblue')
ggdensity(df$len, title = 'Density of tooth length', xlab = 'Tooth length', ylab = 'Density')
# 2-2. Q-Q plot
library(ggpubr)
ggqqplot(df$len)
library(car)
?qqPlot
qqPlot(df$len)
qqPlot(df$len, simulate = FALSE)   # 사용되지 않은 인자 (simulate = FALSE)
qqPlot(df$len, reps = 10)          # 사용되지 않은 인자 (reps = 10)
qqPlot(df$len, id = FALSE)
qqPlot(df$len, id = TRUE)
qqPlot(df$len, lwd = 1)
qqPlot(df$len, lwd = 1, pch = 1)
qqPlot(df$len, lwd = 1, pch = 2)
qqPlot(df$len, lwd = 1, pch = 3)
qqPlot(df$len, lwd = 1, pch = 4)
qqPlot(df$len, lwd = 1, pch = 5)
qqPlot(df$len, lwd = 1, pch = 6)
qqPlot(df$len, lwd = 1, pch = 7)
qqPlot(df$len, lwd = 1, pch = 8)
qqPlot(df$len, lwd = 1, pch = 9)
qqPlot(df$len, lwd = 1, pch = 10)
qqPlot(df$len, lwd = 1, pch = 11)
qqPlot(df$len, lwd = 1, pch = 12)
qqPlot(df$len, lwd = 1, pch = 13)
qqPlot(df$len, lwd = 1, pch = 14)
qqPlot(df$len, lwd = 1, pch = 15)
qqPlot(df$len, lwd = 1, pch = 16)
qqPlot(df$len, lwd = 1, pch = 17)
qqPlot(df$len, lwd = 1, pch = 18)
qqPlot(df$len, lwd = 1, pch = 19)
qqPlot(df$len, lwd = 1, pch = 20)
qqPlot(df$len, lwd = 1, pch = 21)
qqPlot(df$len, lwd = 1, pch = 22)
qqPlot(df$len, lwd = 1, pch = 23)
qqPlot(df$len, lwd = 1, pch = 24)
qqPlot(df$len, lwd = 1, pch = 24, cex = 1)
qqPlot(df$len, lwd = 1, pch = 24, cex = 2)
qqPlot(df$len, lwd = 1, pch = 24, cex = 3)
qqPlot(df$len, lwd = 2, envelope = .95)
qqPlot(df$len, lwd = 2, envelope = .99)
qqPlot(df$len, lwd = 2, envelope = .99, col = 'red')
qqPlot(df$len, lwd = 2, envelope = .99, col = 'red', col.lines = 'black')
qqPlot(df$len, main='Q-Q plot of Tooth length')
qqPlot(df$len, main='Q-Q plot of Tooth length', xlab = 'Theoretical', ylab = 'Length')
qqPlot(df$len, main='Q-Q plot of Tooth length', xlab = 'Theoretical', ylab = 'Length', las = 0)
qqPlot(df$len, main='Q-Q plot of Tooth length', xlab = 'Theoretical', ylab = 'Length', las = 1)
# 2-3. Shapiro Wilk's Test
?shapiro.test
shapiro.test(df$len)  # between 3 and 5000.
( fit.ftest <- var.test(len ~ supp, data = df) )
class(fit.ftest)
mode(fit.ftest)
names(fit.ftest)
fit.ftest$statistic
fit.ftest$parameter
fit.ftest$p.value
fit.ftest$conf.int
fit.ftest$estimate
fit.ftest$null.value
fit.ftest$alternative
fit.ftest$method
fit.ftest$data.name
